apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: workflows
  name: very
  labels:
    workflows.argoproj.io/archive-strategy: "false"
spec:
  entrypoint: silly
  serviceAccountName: workflow
  templates:
    - name: silly
      container:
        image: alpine:latest
        command: [ls]
        args: ["-l"]
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow # new type of k8s spec
metadata:
  namespace: workflows
  name: hello-world # name of the workflow spec
spec:
  entrypoint: whalesay # invoke the whalesay template
  templates:
    - name: whalesay # name of the template
      container:
        image: docker/whalesay
        command: [cowsay]
        args: ["hello world"]
        resources: # limit the resources
          limits:
            memory: 32Mi
            cpu: 100m
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: hello-world-parameters
  namespace: workflows
spec:
  # invoke the whalesay template with
  # "hello world" as the argument
  # to the message parameter
  entrypoint: whalesay
  arguments:
    parameters:
      - name: message
        value: hello world

  templates:
    - name: whalesay
      inputs:
        parameters:
          - name: message # parameter declaration
      container:
        # run cowsay with that message input parameter as args
        image: docker/whalesay
        command: [cowsay]
        args: ["{{inputs.parameters.message}}"]

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: multi-steps
  namespace: workflows
spec:
  entrypoint: hello-hello-hello

  # This spec contains two templates: hello-hello-hello and whalesay
  templates:
    - name: hello-hello-hello
      # Instead of just running a container
      # This template has a sequence of steps
      steps:
        - - name: hello1 # hello1 is run before the following steps
            template: whalesay
            arguments:
              parameters:
                - name: message
                  value: "hello1"
        - - name: hello2a # double dash => run after previous step
            template: whalesay
            arguments:
              parameters:
                - name: message
                  value: "hello2a"
          - name: hello2b # single dash => run in parallel with previous step
            template: whalesay
            arguments:
              parameters:
                - name: message
                  value: "hello2b"

    # This is the same template as from the previous example
    - name: whalesay
      inputs:
        parameters:
          - name: message
      container:
        image: docker/whalesay
        command: [cowsay]
        args: ["{{inputs.parameters.message}}"]

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: workflows
  name: dag-diamond
spec:
  entrypoint: diamond
  templates:
    - name: echo
      inputs:
        parameters:
          - name: message
      container:
        image: alpine:3.7
        command: [echo, "{{inputs.parameters.message}}"]
    - name: diamond
      dag:
        tasks:
          - name: A
            template: echo
            arguments:
              parameters: [{ name: message, value: A }]
          - name: B
            dependencies: [A]
            template: echo
            arguments:
              parameters: [{ name: message, value: B }]
          - name: C
            dependencies: [A]
            template: echo
            arguments:
              parameters: [{ name: message, value: C }]
          - name: D
            dependencies: [B, C]
            template: echo
            arguments:
              parameters: [{ name: message, value: D }]

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: k8s-resource-create
  namespace: workflows
spec:
  entrypoint: nginx-pod
  templates:
    - name: nginx-pod
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            labels:
              run: nginx
            name: nginx
            namespace: workflows
          spec:
            serviceAccount: workflow
            containers:
            - image: nginx
              name: nginx
              resources: {}
            dnsPolicy: ClusterFirst
            restartPolicy: Always
          status: {}
